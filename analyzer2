#!/usr/bin/python
""""
    Author:
    Umang Agrawal (umagrawa@cisco.com)
    Description:
    Generates a SA warning report by analyzing the logs generated by the static_dcos script.
    How to use:
    Put this script in the directory containg all the logs(created by the saw_report script). Then, run python analyzer.py from that directory.
    NOTE : This script runs fine only in python 3.x with pandas library installed.
"""
#Importing Required Packages
import os,shutil,glob,io,time
from collections import defaultdict
import sys
import pandas as pd

def sa_warning_analysis(file):
    warning_record = dict()
    with open(file) as f:
        line = f.readline().strip()
        while (True):
            if '@@' in line :
                file_name = "/".join(line.rsplit("/", 4)[1:])
                count = 0
                if file_name not in warning_record.keys():
                    warning_record[file_name] = defaultdict(list) 
                line = f.readline().strip()
                
            elif '**' in line and count == 0:
                while(True):
                    line = f.readline().strip()
                    if '**' in line:
                        count = 1
                        break
                    elif '**' not in line:
                        if (':' in line):
                            try:
                                filename, lin_no, sev, div, warning = line.split(':',4)
                                warning_record[file_name]['Active'].append((filename, lin_no, sev, div, warning))
                            except ValueError:
                                print(line.split(':'))
                        
            elif '**' in line and count == 1:
                while(True):
                    line = f.readline().strip()
                    if '**' in line:
                        count = 2
                        break
                    elif '**' not in line:
                        if (':' in line):
                            try:
                                filename, lin_no, sev, div, warning = line.split(':',4)
                                warning_record[file_name]['Noise'].append((filename, lin_no, sev, div, warning))
                            except ValueError:
                                print(line.split(':'))

                        
            elif '**' in line and count == 2:
                while(True):
                    line = f.readline().strip()
                    if '**' in line:
                        count = 3
                        break
                    elif '@@' in line :
                        break
                    elif line == '' :
                        break
                    elif '**' not in line:
                        if (':' in line):
                            try:
                                filename, lin_no, sev, div, warning = line.split(':',4)
                                warning_record[file_name]['Parent'].append((filename, lin_no, sev, div, warning))
                            except ValueError:
                                print(line.split(':'))

            
            elif 'Total' in line :
                break
            
            else:
                line = f.readline().strip()

    #Getting the labels for classification of SA Warnings
    div_set = set()
    for key in warning_record.keys():
        for warning_list in warning_record[key].values():
            for item in warning_list:
                div_set.add(item[3])

    #Creating a dictionary for maintaing count for each warning type
    div_type_count = {}
    for item in div_set:
        div_type_count[item] = 0

    #Iterating through the warnings to get the count of eah warning type
    for key in warning_record.keys():
        for warning_list in warning_record[key].values():
            for item in warning_list:
                div_type_count[item[3]] = div_type_count[item[3]] + 1

    final_report = []   
    for div, div_count in div_type_count.items():
        if div_count > 0:
            final_report.append((div, div_count))
    print('\n********** ' + file + ' **********')
    final_report.sort(key = lambda x:x[1], reverse = True)
    df = pd.DataFrame(final_report, columns = [str(file.replace('.','/')), ''])
    with open('report2.csv', 'a') as report:
        df.to_csv(report)
    for item in final_report:
        print( item[0] + '-'*(50-len(item[0])) + ' ' + str(item[1]) )
    print('\n')



if __name__ == "__main__":
    if 'report2.csv' in os.listdir():
        os.remove('report2.csv')
    for file in glob.glob('*'):
        if file not in ['analyzer1', 'analyzer2', 'report1.csv', 'report2.csv']:
            sa_warning_analysis(file)
    print('\nFor more info, please refer : https://wiki.cisco.com/display/DC3SW/SA+Warning+Analyser ')
